{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Token World \u00b6 Token World is a dynamic, multi-agent simulation framework leveraging the power of large language models (LLMs) to create open-ended, evolving environments. Designed for developers, researchers, and enthusiasts, Token World enables the exploration of emergent behaviors, agentic workflows, and complex interactions in various scenarios. Key Features \u00b6 Dynamic Mechanics Generation : The simulation evolves as agents interact, creating new mechanics on demand based on actions performed. Entity-Based Design : Each element in the environment is represented as an entity with unique properties and interactions. Grounded Interactions : Actions are validated with logical preconditions and effects to ensure consistency and realism. Partial Observability : Agents explore and uncover properties of their environment through interactions. Extensible Architecture : Easily customize agents, entities, and scenarios to suit your needs. Why Token World? \u00b6 Token World is not just a tool\u2014it\u2019s a learning experience. By simulating diverse scenarios, you can: - Experiment with agent-based workflows. - Study emergent behaviors in complex systems. - Prototype game mechanics, educational tools, or experimental setups. Whether you're simulating a small town, a role-playing adventure, or a scientific experiment, Token World provides the tools and flexibility to bring your ideas to life. Getting Started \u00b6 Ready to dive in? Check out the Getting Started guide to set up and run your first simulation in minutes. For more details, explore the Features section or browse Examples to see Token World in action. Join the Community \u00b6 Token World is a collaborative effort, and we welcome your contributions! Visit the Contributing section to learn how to get involved. Explore. Innovate. Create. Welcome to Token World.","title":"Home"},{"location":"index.html#token-world","text":"Token World is a dynamic, multi-agent simulation framework leveraging the power of large language models (LLMs) to create open-ended, evolving environments. Designed for developers, researchers, and enthusiasts, Token World enables the exploration of emergent behaviors, agentic workflows, and complex interactions in various scenarios.","title":"Token World"},{"location":"index.html#key-features","text":"Dynamic Mechanics Generation : The simulation evolves as agents interact, creating new mechanics on demand based on actions performed. Entity-Based Design : Each element in the environment is represented as an entity with unique properties and interactions. Grounded Interactions : Actions are validated with logical preconditions and effects to ensure consistency and realism. Partial Observability : Agents explore and uncover properties of their environment through interactions. Extensible Architecture : Easily customize agents, entities, and scenarios to suit your needs.","title":"Key Features"},{"location":"index.html#why-token-world","text":"Token World is not just a tool\u2014it\u2019s a learning experience. By simulating diverse scenarios, you can: - Experiment with agent-based workflows. - Study emergent behaviors in complex systems. - Prototype game mechanics, educational tools, or experimental setups. Whether you're simulating a small town, a role-playing adventure, or a scientific experiment, Token World provides the tools and flexibility to bring your ideas to life.","title":"Why Token World?"},{"location":"index.html#getting-started","text":"Ready to dive in? Check out the Getting Started guide to set up and run your first simulation in minutes. For more details, explore the Features section or browse Examples to see Token World in action.","title":"Getting Started"},{"location":"index.html#join-the-community","text":"Token World is a collaborative effort, and we welcome your contributions! Visit the Contributing section to learn how to get involved. Explore. Innovate. Create. Welcome to Token World.","title":"Join the Community"},{"location":"acknowledgments.html","text":"Acknowledgments \u00b6 The development of Token World is made possible thanks to the contributions, inspiration, and support of many individuals and organizations. This section recognizes those who have played a key role in its creation and evolution. Contributors \u00b6 Reuben John - Project creator and primary developer. Inspiration \u00b6 Very loosely inspired by: Park, J. S., O'Brien, J. C., Cai, C. J., Morris, M. R., Liang, P., & Bernstein, M. S. (2023). Generative agents: Interactive simulacra of human behavior. Proceedings of the 36th Annual ACM Symposium on User Interface Software and Technology, 2:1\u20132:22. https://doi.org/10.1145/3586183.3606763 Also inspired by advancements in: - Agentic Workflows : The integration of multi-agent systems with large language models. - Emergent Behaviors : Studies in artificial intelligence that focus on unplanned yet meaningful system outcomes. - Simulation Frameworks : Tools like Unity and OpenAI Gym that provide rich environments for experimentation. Tools and Libraries \u00b6 This project relies on the following tools and libraries: - Python - Programming language for the core implementation. - SQLite - Lightweight database for entity management. - Streamlit - Framework for the web-based debugging tool. - Pytest - Testing framework for reliable code validation. Community Support \u00b6 A special thanks to: - The open-source community for providing the tools and frameworks that made this project possible. - Early adopters and testers for their invaluable feedback and insights. Join Us \u00b6 We welcome new contributors and collaborators to help shape the future of Token World. Visit the Contributing Guide to learn how to get involved. Thank you to everyone who has contributed to and supported Token World!","title":"Acknowledgments"},{"location":"acknowledgments.html#acknowledgments","text":"The development of Token World is made possible thanks to the contributions, inspiration, and support of many individuals and organizations. This section recognizes those who have played a key role in its creation and evolution.","title":"Acknowledgments"},{"location":"acknowledgments.html#contributors","text":"Reuben John - Project creator and primary developer.","title":"Contributors"},{"location":"acknowledgments.html#inspiration","text":"Very loosely inspired by: Park, J. S., O'Brien, J. C., Cai, C. J., Morris, M. R., Liang, P., & Bernstein, M. S. (2023). Generative agents: Interactive simulacra of human behavior. Proceedings of the 36th Annual ACM Symposium on User Interface Software and Technology, 2:1\u20132:22. https://doi.org/10.1145/3586183.3606763 Also inspired by advancements in: - Agentic Workflows : The integration of multi-agent systems with large language models. - Emergent Behaviors : Studies in artificial intelligence that focus on unplanned yet meaningful system outcomes. - Simulation Frameworks : Tools like Unity and OpenAI Gym that provide rich environments for experimentation.","title":"Inspiration"},{"location":"acknowledgments.html#tools-and-libraries","text":"This project relies on the following tools and libraries: - Python - Programming language for the core implementation. - SQLite - Lightweight database for entity management. - Streamlit - Framework for the web-based debugging tool. - Pytest - Testing framework for reliable code validation.","title":"Tools and Libraries"},{"location":"acknowledgments.html#community-support","text":"A special thanks to: - The open-source community for providing the tools and frameworks that made this project possible. - Early adopters and testers for their invaluable feedback and insights.","title":"Community Support"},{"location":"acknowledgments.html#join-us","text":"We welcome new contributors and collaborators to help shape the future of Token World. Visit the Contributing Guide to learn how to get involved. Thank you to everyone who has contributed to and supported Token World!","title":"Join Us"},{"location":"license.html","text":"GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS Definitions. \"This License\" refers to version 3 of the GNU General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. Source Code. The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a ) The work must carry prominent notices stating that you modified it , and giving a relevant date . b ) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7 . This requirement modifies the requirement in section 4 to \"keep intact all notices\" . c ) You must license the entire work , as a whole , under this License to anyone who comes into possession of a copy . This License will therefore apply , along with any applicable section 7 additional terms , to the whole of the work , and all its parts , regardless of how they are packaged . This License gives no permission to license the work in any other way , but it does not invalidate such permission if you have separately received it . d ) If the work has interactive user interfaces , each must display Appropriate Legal Notices ; however , if the Program has interactive interfaces that do not display Appropriate Legal Notices , your work need not make them do so . A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a ) Convey the object code in , or embodied in , a physical product ( including a physical distribution medium ) , accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange . b ) Convey the object code in , or embodied in , a physical product ( including a physical distribution medium ) , accompanied by a written offer , valid for at least three years and valid for as long as you offer spare parts or customer support for that product model , to give anyone who possesses the object code either ( 1 ) a copy of the Corresponding Source for all the software in the product that is covered by this License , on a durable physical medium customarily used for software interchange , for a price no more than your reasonable cost of physically performing this conveying of source , or ( 2 ) access to copy the Corresponding Source from a network server at no charge . c ) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source . This alternative is allowed only occasionally and noncommercially , and only if you received the object code with such an offer , in accord with subsection 6 b . d ) Convey the object code by offering access from a designated place ( gratis or for a charge ) , and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge . You need not require recipients to copy the Corresponding Source along with the object code . If the place to copy the object code is a network server , the Corresponding Source may be on a different server ( operated by you or a third party ) that supports equivalent copying facilities , provided you maintain clear directions next to the object code saying where to find the Corresponding Source . Regardless of what server hosts the Corresponding Source , you remain obligated to ensure that it is available for as long as needed to satisfy these requirements . e ) Convey the object code using peer - to - peer transmission , provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6 d . A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. Additional Terms. \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a ) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License ; or b ) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it ; or c ) Prohibiting misrepresentation of the origin of that material , or requiring that modified versions of such material be marked in reasonable ways as different from the original version ; or d ) Limiting the use for publicity purposes of names of licensors or authors of the material ; or e ) Declining to grant rights under trademark law for use of some trade names , trademarks , or service marks ; or f ) Requiring indemnification of licensors and authors of that material by anyone who conveys the material ( or modified versions of it ) with contractual assumptions of liability to the recipient , for any liability that these contractual assumptions directly impose on those licensors and authors . All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. Patents. A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. Use with the GNU Affero General Public License. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. < one line to give the program ' s name and a brief idea of what it does .> Copyright ( C ) < year > < name of author > This program is free software : you can redistribute it and / or modify it under the terms of the GNU General Public License as published by the Free Software Foundation , either version 3 of the License , or ( at your option ) any later version . This program is distributed in the hope that it will be useful , but WITHOUT ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU General Public License for more details . You should have received a copy of the GNU General Public License along with this program . If not , see < https : //www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: < program > Copyright ( C ) < year > < name of author > This program comes with ABSOLUTELY NO WARRANTY ; for details type ` show w ' . This is free software , and you are welcome to redistribute it under certain conditions ; type ` show c ' for details . The hypothetical commands show w' and show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\". You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see https://www.gnu.org/licenses/ . The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read https://www.gnu.org/licenses/why-not-lgpl.html .","title":"License"},{"location":"about/introduction.html","text":"Introduction \u00b6 Welcome to Token World , a groundbreaking multi-agent simulation framework designed to inspire innovation and exploration. By leveraging large language models, Token World creates a flexible and dynamic platform for simulating agent interactions, emergent behaviors, and complex systems. What is Token World? \u00b6 Token World allows you to design and simulate a variety of scenarios, ranging from small-town social systems to intricate role-playing games. With its unique focus on grounded interactions and dynamic evolution , Token World provides a powerful toolkit for: - Experimenting with agent-based models. - Studying emergent behaviors in open-ended environments. - Creating scalable, extensible simulations tailored to your needs. Who is Token World For? \u00b6 Token World is built for: - Developers exploring agentic workflows and AI-driven systems. - Researchers in fields such as psychology, social sciences, and economics. - Hobbyists and enthusiasts interested in building unique, interactive simulations. Why Use Token World? \u00b6 Unlike traditional simulation frameworks, Token World stands out because: 1. It dynamically generates mechanics as the simulation evolves. 2. It ensures logical consistency through robust grounding mechanisms. 3. It provides partial observability, requiring agents to explore and discover their environment. 4. It is highly customizable, supporting diverse scenarios with minimal setup. Vision and Goals \u00b6 The vision for Token World is to: - Empower developers and researchers to push the boundaries of simulation and AI. - Provide a learning platform to experiment with agentic workflows. - Enable the creation of realistic, scalable, and interactive simulations for various use cases. Explore more in the Features section to learn what makes Token World unique!","title":"Introduction"},{"location":"about/introduction.html#introduction","text":"Welcome to Token World , a groundbreaking multi-agent simulation framework designed to inspire innovation and exploration. By leveraging large language models, Token World creates a flexible and dynamic platform for simulating agent interactions, emergent behaviors, and complex systems.","title":"Introduction"},{"location":"about/introduction.html#what-is-token-world","text":"Token World allows you to design and simulate a variety of scenarios, ranging from small-town social systems to intricate role-playing games. With its unique focus on grounded interactions and dynamic evolution , Token World provides a powerful toolkit for: - Experimenting with agent-based models. - Studying emergent behaviors in open-ended environments. - Creating scalable, extensible simulations tailored to your needs.","title":"What is Token World?"},{"location":"about/introduction.html#who-is-token-world-for","text":"Token World is built for: - Developers exploring agentic workflows and AI-driven systems. - Researchers in fields such as psychology, social sciences, and economics. - Hobbyists and enthusiasts interested in building unique, interactive simulations.","title":"Who is Token World For?"},{"location":"about/introduction.html#why-use-token-world","text":"Unlike traditional simulation frameworks, Token World stands out because: 1. It dynamically generates mechanics as the simulation evolves. 2. It ensures logical consistency through robust grounding mechanisms. 3. It provides partial observability, requiring agents to explore and discover their environment. 4. It is highly customizable, supporting diverse scenarios with minimal setup.","title":"Why Use Token World?"},{"location":"about/introduction.html#vision-and-goals","text":"The vision for Token World is to: - Empower developers and researchers to push the boundaries of simulation and AI. - Provide a learning platform to experiment with agentic workflows. - Enable the creation of realistic, scalable, and interactive simulations for various use cases. Explore more in the Features section to learn what makes Token World unique!","title":"Vision and Goals"},{"location":"about/vision.html","text":"Vision & Goals \u00b6 Token World is more than just a simulation framework\u2014it's a vision for the future of multi-agent systems. By merging cutting-edge technology with creative design, Token World seeks to unlock new possibilities in understanding and building dynamic, interactive environments. Our Vision \u00b6 Empowering Innovation Token World aims to be a platform where developers, researchers, and enthusiasts can experiment freely, pushing the boundaries of agent-based simulations. The goal is to inspire breakthroughs in AI, game development, education, and social science research. Simplifying Complexity By abstracting away the intricate details of agent-environment interaction, Token World provides users with a clean, intuitive interface to focus on high-level experimentation and innovation. Creating Meaningful Simulations The framework is designed to make every simulation unique, grounded, and realistic. It mirrors real-world complexities by dynamically generating mechanics and evolving with agent interactions. Core Goals \u00b6 Flexibility Enable users to design simulations ranging from simple experiments to highly complex systems. Token World should adapt seamlessly to diverse scenarios and requirements. Realism Ground agent actions and environment responses in logical rules to ensure consistent and meaningful interactions. Scalability Optimize the framework for simulations that can run efficiently on personal laptops while supporting larger setups for advanced research and applications. Accessibility Lower the barrier to entry for working with agentic workflows and large language models by providing robust documentation, examples, and tools. Community-Driven Growth Foster a collaborative ecosystem where users can contribute features, share experiments, and improve the framework together. The Big Picture \u00b6 At its core, Token World is about exploration, discovery, and creativity . By empowering users to build, test, and iterate on simulations, the framework hopes to contribute to advancements in: - Understanding social dynamics and emergent behaviors. - Prototyping new applications in gaming, education, and AI. - Pioneering innovative uses of large language models. Token World is more than a tool\u2014it's a step towards a future where AI and simulation work hand in hand to solve complex problems and fuel human curiosity. Ready to dive into the details? Explore the Features to see what makes Token World stand out.","title":"Vision & Goals"},{"location":"about/vision.html#vision-goals","text":"Token World is more than just a simulation framework\u2014it's a vision for the future of multi-agent systems. By merging cutting-edge technology with creative design, Token World seeks to unlock new possibilities in understanding and building dynamic, interactive environments.","title":"Vision &amp; Goals"},{"location":"about/vision.html#our-vision","text":"Empowering Innovation Token World aims to be a platform where developers, researchers, and enthusiasts can experiment freely, pushing the boundaries of agent-based simulations. The goal is to inspire breakthroughs in AI, game development, education, and social science research. Simplifying Complexity By abstracting away the intricate details of agent-environment interaction, Token World provides users with a clean, intuitive interface to focus on high-level experimentation and innovation. Creating Meaningful Simulations The framework is designed to make every simulation unique, grounded, and realistic. It mirrors real-world complexities by dynamically generating mechanics and evolving with agent interactions.","title":"Our Vision"},{"location":"about/vision.html#core-goals","text":"Flexibility Enable users to design simulations ranging from simple experiments to highly complex systems. Token World should adapt seamlessly to diverse scenarios and requirements. Realism Ground agent actions and environment responses in logical rules to ensure consistent and meaningful interactions. Scalability Optimize the framework for simulations that can run efficiently on personal laptops while supporting larger setups for advanced research and applications. Accessibility Lower the barrier to entry for working with agentic workflows and large language models by providing robust documentation, examples, and tools. Community-Driven Growth Foster a collaborative ecosystem where users can contribute features, share experiments, and improve the framework together.","title":"Core Goals"},{"location":"about/vision.html#the-big-picture","text":"At its core, Token World is about exploration, discovery, and creativity . By empowering users to build, test, and iterate on simulations, the framework hopes to contribute to advancements in: - Understanding social dynamics and emergent behaviors. - Prototyping new applications in gaming, education, and AI. - Pioneering innovative uses of large language models. Token World is more than a tool\u2014it's a step towards a future where AI and simulation work hand in hand to solve complex problems and fuel human curiosity. Ready to dive into the details? Explore the Features to see what makes Token World stand out.","title":"The Big Picture"},{"location":"advanced/agent_evolution.html","text":"Agent Evolution \u00b6 Token World supports dynamic agent evolution, allowing agents to adapt, learn, and develop new goals and behaviors over time. This feature enhances the realism and depth of simulations, enabling the study of emergent behaviors and long-term interactions. Notes: Update the below documentation to focus on just goals and agent memory where other mechanics (relationship development, behavioral adaptation, etc) emerge from these two fundamental mechanics. Key Mechanisms of Agent Evolution \u00b6 Dynamic Goal Adjustment Agents can modify their goals based on their interactions and environment changes. Example: Initial Goal: \"Harvest apples.\" New Goal (post-interaction): \"Trade apples for coins.\" Relationship Development Agents track relationships with other agents, which influence future interactions. Example: Positive Interaction: Builds trust for collaboration. Negative Interaction: Leads to competition or conflict. Trait and Ability Growth Agents can improve their traits or gain new abilities over time. Example: A farmer agent gains the \"plowing\" ability after using a plow multiple times. Behavioral Adaptation Agents adapt their strategies based on the success or failure of past actions. Example: An explorer avoids dangerous areas after a failed exploration attempt. How It Works \u00b6 1. Experience Tracking \u00b6 Agents maintain an internal record of: Completed actions. Interaction outcomes. Changes in the environment. 2. Learning Mechanisms \u00b6 ~~ Reinforcement Learning : Agents prioritize actions that yield positive results.~~ Feedback Integration : Feedback from failed actions helps refine future decisions. 3. Personality Evolution \u00b6 Agents\u2019 personalities evolve through repeated interactions. Example: A \"curious\" agent becomes \"cautious\" after encountering multiple dangers. Example: Evolution in Action \u00b6 Initial State \u00b6 Agent : Alice, a farmer with basic farming skills. Goal : Harvest apples. Interaction \u00b6 Alice completes multiple harvesting actions, gaining experience. The environment introduces a new mechanic: trading resources. Alice adjusts her goal to trade apples for tools. Outcome \u00b6 New Trait : Alice gains a \"trading\" ability. Behavior Change : Alice prioritizes trade over farming when tools are low. Experimentation Ideas \u00b6 Long-Term Scenarios : Observe how agents evolve over hundreds of time steps. Competitive Dynamics : Study evolution in competitive environments with scarce resources. Collaborative Growth : Explore how relationships impact group evolution.","title":"Agent Evolution"},{"location":"advanced/agent_evolution.html#agent-evolution","text":"Token World supports dynamic agent evolution, allowing agents to adapt, learn, and develop new goals and behaviors over time. This feature enhances the realism and depth of simulations, enabling the study of emergent behaviors and long-term interactions. Notes: Update the below documentation to focus on just goals and agent memory where other mechanics (relationship development, behavioral adaptation, etc) emerge from these two fundamental mechanics.","title":"Agent Evolution"},{"location":"advanced/agent_evolution.html#key-mechanisms-of-agent-evolution","text":"Dynamic Goal Adjustment Agents can modify their goals based on their interactions and environment changes. Example: Initial Goal: \"Harvest apples.\" New Goal (post-interaction): \"Trade apples for coins.\" Relationship Development Agents track relationships with other agents, which influence future interactions. Example: Positive Interaction: Builds trust for collaboration. Negative Interaction: Leads to competition or conflict. Trait and Ability Growth Agents can improve their traits or gain new abilities over time. Example: A farmer agent gains the \"plowing\" ability after using a plow multiple times. Behavioral Adaptation Agents adapt their strategies based on the success or failure of past actions. Example: An explorer avoids dangerous areas after a failed exploration attempt.","title":"Key Mechanisms of Agent Evolution"},{"location":"advanced/agent_evolution.html#how-it-works","text":"","title":"How It Works"},{"location":"advanced/agent_evolution.html#1-experience-tracking","text":"Agents maintain an internal record of: Completed actions. Interaction outcomes. Changes in the environment.","title":"1. Experience Tracking"},{"location":"advanced/agent_evolution.html#2-learning-mechanisms","text":"~~ Reinforcement Learning : Agents prioritize actions that yield positive results.~~ Feedback Integration : Feedback from failed actions helps refine future decisions.","title":"2. Learning Mechanisms"},{"location":"advanced/agent_evolution.html#3-personality-evolution","text":"Agents\u2019 personalities evolve through repeated interactions. Example: A \"curious\" agent becomes \"cautious\" after encountering multiple dangers.","title":"3. Personality Evolution"},{"location":"advanced/agent_evolution.html#example-evolution-in-action","text":"","title":"Example: Evolution in Action"},{"location":"advanced/agent_evolution.html#initial-state","text":"Agent : Alice, a farmer with basic farming skills. Goal : Harvest apples.","title":"Initial State"},{"location":"advanced/agent_evolution.html#interaction","text":"Alice completes multiple harvesting actions, gaining experience. The environment introduces a new mechanic: trading resources. Alice adjusts her goal to trade apples for tools.","title":"Interaction"},{"location":"advanced/agent_evolution.html#outcome","text":"New Trait : Alice gains a \"trading\" ability. Behavior Change : Alice prioritizes trade over farming when tools are low.","title":"Outcome"},{"location":"advanced/agent_evolution.html#experimentation-ideas","text":"Long-Term Scenarios : Observe how agents evolve over hundreds of time steps. Competitive Dynamics : Study evolution in competitive environments with scarce resources. Collaborative Growth : Explore how relationships impact group evolution.","title":"Experimentation Ideas"},{"location":"advanced/integrating_models.html","text":"Integrating New Models \u00b6 Token World is designed to be compatible with a variety of large language models (LLMs). This guide explains how to integrate custom or third-party models to enhance agent behavior and expand simulation capabilities. WARNING: The below steps are for illustrative purposes only and not meant to serve as actual instructions Supported Model Types \u00b6 Pre-Trained Models Popular LLMs like GPT, LLaMA, and OpenAI\u2019s GPT-3.5/4. Fine-Tuned Models Custom models adapted for specific use cases, such as domain-specific interactions. Local Lightweight Models Optimized models for resource-constrained environments (e.g., 2-8 billion parameters). Integration Steps \u00b6 1. Select Your Model \u00b6 Choose a model based on your needs and hardware: OpenAI API : For GPT models via API calls. Hugging Face Transformers : For local or custom models. Custom APIs : For proprietary or self-hosted models. 2. Update the Configuration \u00b6 Modify the config/settings.json file to specify your model: \"settings\" : { \"modelType\" : \"huggingface\" , \"modelPath\" : \"gpt-neo-2.7b\" , \"useGPU\" : true } 3. Install Necessary Libraries \u00b6 Install the libraries required for your chosen model: - Hugging Face Transformers : bash pip install transformers - OpenAI API : bash pip install openai 4. Update the Model Handler \u00b6 Extend the src/models/model_handler.py file to include your model\u2019s initialization and query logic: from transformers import AutoModelForCausalLM , AutoTokenizer class HuggingFaceModel : def __init__ ( self , model_path ): self . tokenizer = AutoTokenizer . from_pretrained ( model_path ) self . model = AutoModelForCausalLM . from_pretrained ( model_path ) def generate_response ( self , prompt ): inputs = self . tokenizer ( prompt , return_tensors = \"pt\" ) outputs = self . model . generate ( inputs [ \"input_ids\" ]) return self . tokenizer . decode ( outputs [ 0 ], skip_special_tokens = True ) 5. Test the Integration \u00b6 Run a simple simulation to ensure the model responds correctly: python run_simulation.py --test-model Advanced Configuration \u00b6 Enable Multiple Models \u00b6 Token World supports multiple models for different agents: \"agents\" : [ { \"name\" : \"Alice\" , \"model\" : \"gpt-3.5\" }, { \"name\" : \"Bob\" , \"model\" : \"gpt-neo-2.7b\" } ] Add Custom Prompts \u00b6 Customize agent prompts in the agents.json file: \"agents\" : [ { \"name\" : \"Alice\" , \"prompt\" : \"You are a farmer in a small town. Respond with curiosity.\" } ] Optimization Tips \u00b6 Use Quantized Models Reduce resource usage by using quantized weights for local models. bash pip install optimum Example: python from optimum.onnxruntime import ORTModelForCausalLM model = ORTModelForCausalLM.from_pretrained(\"quantized-model\") Batch Inference Process multiple agent prompts in a single batch to improve efficiency. Fallback Models Use lightweight models as fallbacks if the primary model exceeds resource limits. Example: Integrating a Custom Model \u00b6 Scenario \u00b6 Integrate a fine-tuned model trained for customer service simulations. Steps \u00b6 Train the model using domain-specific data. Add the model to the config/settings.json file: json \"settings\": { \"modelType\": \"huggingface\", \"modelPath\": \"custom-service-model\" } Update prompts to reflect the new domain: json \"agents\": [ { \"name\": \"SupportBot\", \"prompt\": \"You are a helpful customer service representative.\" } ] Next Steps \u00b6 To further customize agent behavior, explore: - Agent Evolution - Sub-Agent Delegation","title":"Integrating New Models"},{"location":"advanced/integrating_models.html#integrating-new-models","text":"Token World is designed to be compatible with a variety of large language models (LLMs). This guide explains how to integrate custom or third-party models to enhance agent behavior and expand simulation capabilities. WARNING: The below steps are for illustrative purposes only and not meant to serve as actual instructions","title":"Integrating New Models"},{"location":"advanced/integrating_models.html#supported-model-types","text":"Pre-Trained Models Popular LLMs like GPT, LLaMA, and OpenAI\u2019s GPT-3.5/4. Fine-Tuned Models Custom models adapted for specific use cases, such as domain-specific interactions. Local Lightweight Models Optimized models for resource-constrained environments (e.g., 2-8 billion parameters).","title":"Supported Model Types"},{"location":"advanced/integrating_models.html#integration-steps","text":"","title":"Integration Steps"},{"location":"advanced/integrating_models.html#1-select-your-model","text":"Choose a model based on your needs and hardware: OpenAI API : For GPT models via API calls. Hugging Face Transformers : For local or custom models. Custom APIs : For proprietary or self-hosted models.","title":"1. Select Your Model"},{"location":"advanced/integrating_models.html#2-update-the-configuration","text":"Modify the config/settings.json file to specify your model: \"settings\" : { \"modelType\" : \"huggingface\" , \"modelPath\" : \"gpt-neo-2.7b\" , \"useGPU\" : true }","title":"2. Update the Configuration"},{"location":"advanced/integrating_models.html#3-install-necessary-libraries","text":"Install the libraries required for your chosen model: - Hugging Face Transformers : bash pip install transformers - OpenAI API : bash pip install openai","title":"3. Install Necessary Libraries"},{"location":"advanced/integrating_models.html#4-update-the-model-handler","text":"Extend the src/models/model_handler.py file to include your model\u2019s initialization and query logic: from transformers import AutoModelForCausalLM , AutoTokenizer class HuggingFaceModel : def __init__ ( self , model_path ): self . tokenizer = AutoTokenizer . from_pretrained ( model_path ) self . model = AutoModelForCausalLM . from_pretrained ( model_path ) def generate_response ( self , prompt ): inputs = self . tokenizer ( prompt , return_tensors = \"pt\" ) outputs = self . model . generate ( inputs [ \"input_ids\" ]) return self . tokenizer . decode ( outputs [ 0 ], skip_special_tokens = True )","title":"4. Update the Model Handler"},{"location":"advanced/integrating_models.html#5-test-the-integration","text":"Run a simple simulation to ensure the model responds correctly: python run_simulation.py --test-model","title":"5. Test the Integration"},{"location":"advanced/integrating_models.html#advanced-configuration","text":"","title":"Advanced Configuration"},{"location":"advanced/integrating_models.html#enable-multiple-models","text":"Token World supports multiple models for different agents: \"agents\" : [ { \"name\" : \"Alice\" , \"model\" : \"gpt-3.5\" }, { \"name\" : \"Bob\" , \"model\" : \"gpt-neo-2.7b\" } ]","title":"Enable Multiple Models"},{"location":"advanced/integrating_models.html#add-custom-prompts","text":"Customize agent prompts in the agents.json file: \"agents\" : [ { \"name\" : \"Alice\" , \"prompt\" : \"You are a farmer in a small town. Respond with curiosity.\" } ]","title":"Add Custom Prompts"},{"location":"advanced/integrating_models.html#optimization-tips","text":"Use Quantized Models Reduce resource usage by using quantized weights for local models. bash pip install optimum Example: python from optimum.onnxruntime import ORTModelForCausalLM model = ORTModelForCausalLM.from_pretrained(\"quantized-model\") Batch Inference Process multiple agent prompts in a single batch to improve efficiency. Fallback Models Use lightweight models as fallbacks if the primary model exceeds resource limits.","title":"Optimization Tips"},{"location":"advanced/integrating_models.html#example-integrating-a-custom-model","text":"","title":"Example: Integrating a Custom Model"},{"location":"advanced/integrating_models.html#scenario","text":"Integrate a fine-tuned model trained for customer service simulations.","title":"Scenario"},{"location":"advanced/integrating_models.html#steps","text":"Train the model using domain-specific data. Add the model to the config/settings.json file: json \"settings\": { \"modelType\": \"huggingface\", \"modelPath\": \"custom-service-model\" } Update prompts to reflect the new domain: json \"agents\": [ { \"name\": \"SupportBot\", \"prompt\": \"You are a helpful customer service representative.\" } ]","title":"Steps"},{"location":"advanced/integrating_models.html#next-steps","text":"To further customize agent behavior, explore: - Agent Evolution - Sub-Agent Delegation","title":"Next Steps"},{"location":"advanced/scalability.html","text":"Scalability \u00b6 Token World is designed to accommodate simulations of varying complexity, from small-scale experiments on personal devices to large-scale simulations on distributed systems. This section explains how to optimize and scale your simulations effectively. Levels of Scalability \u00b6 1. Small-Scale Simulations \u00b6 Use Case : Simple setups with a limited number of agents and entities. Environment : Personal laptops or low-power machines. Optimization Tips : Use lightweight LLMs for agent processing (e.g., models with 2-8 billion parameters). Limit the number of agents and entities to reduce computational overhead. Adjust simulation time steps to a manageable number in config/settings.json . 2. Medium-Scale Simulations \u00b6 Use Case : More complex scenarios with diverse agent interactions and moderate computational demands. Environment : High-performance local machines or basic cloud instances. Optimization Tips : Leverage GPU acceleration for LLM inference. Use database indexing for faster querying of entities. Implement periodic data cleanup to manage memory usage. 3. Large-Scale Simulations \u00b6 Use Case : Advanced research or commercial applications with numerous agents, entities, and interactions. Environment : Distributed systems or high-powered cloud environments. Optimization Tips : Distribute agent processing across multiple nodes. Use efficient communication protocols (e.g., gRPC) between nodes. Enable batch processing for actions to minimize overhead. Techniques for Optimization \u00b6 1. Lightweight Models \u00b6 Use models optimized for inference on resource-constrained systems, such as Hugging Face Transformers with quantized weights. 2. Entity Partitioning \u00b6 Divide the environment into regions or zones, each managed independently. Example: Agents in \"Town\" only interact with entities in that region. Other regions, like \"Forest,\" are activated only when agents explore them. 3. Action Prioritization \u00b6 Assign priority levels to agent actions to process critical tasks first. Example: High priority: Actions affecting global states (e.g., \"Build a bridge\"). Low priority: Routine actions (e.g., \"Collect apples\"). 4. Dynamic Resource Allocation \u00b6 Dynamically allocate system resources based on simulation demand. Example: Increase memory usage for entity-heavy phases. Optimize CPU usage during action validation. Distributed Systems \u00b6 For large-scale simulations, consider a distributed architecture: 1. Agent Distribution : - Assign a subset of agents to each node for processing. 2. Entity Synchronization : - Use a centralized database or synchronization protocol to manage global entity states. 3. Load Balancing : - Implement load balancers to distribute computational tasks evenly. Example: Scaling a Medium-Sized Simulation \u00b6 Configuration \u00b6 Agents : 50 Entities : 200 Hardware : Local machine with a GPU (e.g., NVIDIA RTX 3080). Optimization Steps \u00b6 Use an 8-billion parameter LLM with quantized weights for faster inference. Limit simulation time steps to 500. Enable GPU acceleration for agent processing. Next Steps \u00b6 To explore how scalability integrates with other advanced features, see: - Agent Evolution - Integrating New Models","title":"Scalability"},{"location":"advanced/scalability.html#scalability","text":"Token World is designed to accommodate simulations of varying complexity, from small-scale experiments on personal devices to large-scale simulations on distributed systems. This section explains how to optimize and scale your simulations effectively.","title":"Scalability"},{"location":"advanced/scalability.html#levels-of-scalability","text":"","title":"Levels of Scalability"},{"location":"advanced/scalability.html#1-small-scale-simulations","text":"Use Case : Simple setups with a limited number of agents and entities. Environment : Personal laptops or low-power machines. Optimization Tips : Use lightweight LLMs for agent processing (e.g., models with 2-8 billion parameters). Limit the number of agents and entities to reduce computational overhead. Adjust simulation time steps to a manageable number in config/settings.json .","title":"1. Small-Scale Simulations"},{"location":"advanced/scalability.html#2-medium-scale-simulations","text":"Use Case : More complex scenarios with diverse agent interactions and moderate computational demands. Environment : High-performance local machines or basic cloud instances. Optimization Tips : Leverage GPU acceleration for LLM inference. Use database indexing for faster querying of entities. Implement periodic data cleanup to manage memory usage.","title":"2. Medium-Scale Simulations"},{"location":"advanced/scalability.html#3-large-scale-simulations","text":"Use Case : Advanced research or commercial applications with numerous agents, entities, and interactions. Environment : Distributed systems or high-powered cloud environments. Optimization Tips : Distribute agent processing across multiple nodes. Use efficient communication protocols (e.g., gRPC) between nodes. Enable batch processing for actions to minimize overhead.","title":"3. Large-Scale Simulations"},{"location":"advanced/scalability.html#techniques-for-optimization","text":"","title":"Techniques for Optimization"},{"location":"advanced/scalability.html#1-lightweight-models","text":"Use models optimized for inference on resource-constrained systems, such as Hugging Face Transformers with quantized weights.","title":"1. Lightweight Models"},{"location":"advanced/scalability.html#2-entity-partitioning","text":"Divide the environment into regions or zones, each managed independently. Example: Agents in \"Town\" only interact with entities in that region. Other regions, like \"Forest,\" are activated only when agents explore them.","title":"2. Entity Partitioning"},{"location":"advanced/scalability.html#3-action-prioritization","text":"Assign priority levels to agent actions to process critical tasks first. Example: High priority: Actions affecting global states (e.g., \"Build a bridge\"). Low priority: Routine actions (e.g., \"Collect apples\").","title":"3. Action Prioritization"},{"location":"advanced/scalability.html#4-dynamic-resource-allocation","text":"Dynamically allocate system resources based on simulation demand. Example: Increase memory usage for entity-heavy phases. Optimize CPU usage during action validation.","title":"4. Dynamic Resource Allocation"},{"location":"advanced/scalability.html#distributed-systems","text":"For large-scale simulations, consider a distributed architecture: 1. Agent Distribution : - Assign a subset of agents to each node for processing. 2. Entity Synchronization : - Use a centralized database or synchronization protocol to manage global entity states. 3. Load Balancing : - Implement load balancers to distribute computational tasks evenly.","title":"Distributed Systems"},{"location":"advanced/scalability.html#example-scaling-a-medium-sized-simulation","text":"","title":"Example: Scaling a Medium-Sized Simulation"},{"location":"advanced/scalability.html#configuration","text":"Agents : 50 Entities : 200 Hardware : Local machine with a GPU (e.g., NVIDIA RTX 3080).","title":"Configuration"},{"location":"advanced/scalability.html#optimization-steps","text":"Use an 8-billion parameter LLM with quantized weights for faster inference. Limit simulation time steps to 500. Enable GPU acceleration for agent processing.","title":"Optimization Steps"},{"location":"advanced/scalability.html#next-steps","text":"To explore how scalability integrates with other advanced features, see: - Agent Evolution - Integrating New Models","title":"Next Steps"},{"location":"contributing/coding_standards.html","text":"Page under construction...","title":"Coding Standards"},{"location":"contributing/how_to_contribute.html","text":"Here\u2019s a complete draft for the contributing/how_to_contribute.md page: ```markdown How to Contribute \u00b6 Token World thrives on collaboration and contributions from developers, researchers, and enthusiasts. Whether you\u2019re fixing bugs, suggesting new features, or improving the documentation, your input is valuable to the project. Ways to Contribute \u00b6 Report Issues Found a bug or unexpected behavior? Help us improve by reporting it on the Issues page . Include: A clear title and description of the issue. Steps to reproduce the problem. Your system details (e.g., OS, Python version, hardware). Logs or screenshots, if applicable. Suggest Features Have a great idea for a new feature or enhancement? Start a conversation on the Discussions page . Include: A detailed description of your idea. Potential use cases and benefits. Suggestions for implementation, if possible. Fix Bugs Check the Issues page for bugs labeled good first issue or help wanted . Comment on the issue to let others know you\u2019re working on it. Contribute Code Add new features, fix bugs, or improve existing code. Follow the coding standards outlined in Coding Standards . Submit a pull request (PR) with a clear description of the changes. Improve Documentation Found outdated or unclear documentation? Update it! Check for issues labeled documentation on the Issues page . Getting Started with Contributions \u00b6 Fork the Repository Fork the Token World repository to your GitHub account. Clone your forked repository: bash git clone https://github.com/your-username/token-world.git Navigate to the project directory: bash cd token-world Set Up the Development Environment See README.md#setup Create a Feature Branch Always create a new branch for your contributions: bash git checkout -b feature/your-feature-name Make Your Changes Write clean, well-documented code. Include tests for your changes where applicable. Run Tests Ensure your changes don\u2019t break existing functionality: bash pytest Submit a Pull Request Push your branch to GitHub: bash git push origin feature/your-feature-name Go to the original repository and create a pull request. Provide a clear title and description of your changes. Need Help? \u00b6 If you\u2019re unsure how to start or have questions, reach out through the Issues page or Discussions . We\u2019re excited to see your contributions!","title":"How to Contribute"},{"location":"contributing/how_to_contribute.html#how-to-contribute","text":"Token World thrives on collaboration and contributions from developers, researchers, and enthusiasts. Whether you\u2019re fixing bugs, suggesting new features, or improving the documentation, your input is valuable to the project.","title":"How to Contribute"},{"location":"contributing/how_to_contribute.html#ways-to-contribute","text":"Report Issues Found a bug or unexpected behavior? Help us improve by reporting it on the Issues page . Include: A clear title and description of the issue. Steps to reproduce the problem. Your system details (e.g., OS, Python version, hardware). Logs or screenshots, if applicable. Suggest Features Have a great idea for a new feature or enhancement? Start a conversation on the Discussions page . Include: A detailed description of your idea. Potential use cases and benefits. Suggestions for implementation, if possible. Fix Bugs Check the Issues page for bugs labeled good first issue or help wanted . Comment on the issue to let others know you\u2019re working on it. Contribute Code Add new features, fix bugs, or improve existing code. Follow the coding standards outlined in Coding Standards . Submit a pull request (PR) with a clear description of the changes. Improve Documentation Found outdated or unclear documentation? Update it! Check for issues labeled documentation on the Issues page .","title":"Ways to Contribute"},{"location":"contributing/how_to_contribute.html#getting-started-with-contributions","text":"Fork the Repository Fork the Token World repository to your GitHub account. Clone your forked repository: bash git clone https://github.com/your-username/token-world.git Navigate to the project directory: bash cd token-world Set Up the Development Environment See README.md#setup Create a Feature Branch Always create a new branch for your contributions: bash git checkout -b feature/your-feature-name Make Your Changes Write clean, well-documented code. Include tests for your changes where applicable. Run Tests Ensure your changes don\u2019t break existing functionality: bash pytest Submit a Pull Request Push your branch to GitHub: bash git push origin feature/your-feature-name Go to the original repository and create a pull request. Provide a clear title and description of your changes.","title":"Getting Started with Contributions"},{"location":"contributing/how_to_contribute.html#need-help","text":"If you\u2019re unsure how to start or have questions, reach out through the Issues page or Discussions . We\u2019re excited to see your contributions!","title":"Need Help?"},{"location":"contributing/reporting_issues.html","text":"Page under construction...","title":"Reporting Issues"},{"location":"features/index.html","text":"Features Overview \u00b6 Token World combines cutting-edge technologies with innovative design principles to provide a flexible, dynamic, and scalable simulation framework. Here's an overview of what makes Token World a unique and powerful tool. Core Features \u00b6 Dynamic Mechanics Generation The mechanics of the simulation evolve on demand, based on the actions performed by agents. This ensures that simulations are not only adaptive but also reflective of the agents\u2019 behaviors. Entity-Based Environment Every element in the simulation is modeled as an entity with unique properties, stored in an SQLite database. Entities interact through precondition and effect-based actions, ensuring logical consistency. Agentic Interactions Agents generate natural language actions, which are validated and executed using grounding mechanisms. This allows for realistic and meaningful behaviors in the simulation. Partial Observability Framework Agents operate with limited knowledge of their environment. Exploration and interaction are required to uncover properties and expand their understanding. Web-Based Debugging Tool Visualize interactions, inspect entity states, and debug simulations in real time. Provides an accessible interface for monitoring and troubleshooting. Advanced Features \u00b6 Delegated Action Handling Specialized sub-agents manage specific types of actions (e.g., navigation, item manipulation). Fallback mechanisms ensure robustness when actions cannot be executed. Customizability Easily modify agents, entities, and scenarios to tailor simulations to your needs. Supports integration with various large language models, including lightweight local models. Scalability Optimized for small to medium-scale simulations on personal laptops. Designed to support larger setups for advanced research or commercial applications. Interpretable Logging Logs every interaction and state change, allowing users to analyze agent behaviors and simulation dynamics. Provides valuable insights for debugging and iterative development. Why These Features Matter \u00b6 Token World\u2019s features are designed to: - Provide a dynamic and realistic environment for studying agent-based interactions. - Offer a flexible and extensible framework that adapts to a wide range of use cases. - Enable users to explore innovative applications in AI, gaming, education, and research. Ready to start using these features? Check out the Quick Start Guide to get up and running!","title":"Overview"},{"location":"features/index.html#features-overview","text":"Token World combines cutting-edge technologies with innovative design principles to provide a flexible, dynamic, and scalable simulation framework. Here's an overview of what makes Token World a unique and powerful tool.","title":"Features Overview"},{"location":"features/index.html#core-features","text":"Dynamic Mechanics Generation The mechanics of the simulation evolve on demand, based on the actions performed by agents. This ensures that simulations are not only adaptive but also reflective of the agents\u2019 behaviors. Entity-Based Environment Every element in the simulation is modeled as an entity with unique properties, stored in an SQLite database. Entities interact through precondition and effect-based actions, ensuring logical consistency. Agentic Interactions Agents generate natural language actions, which are validated and executed using grounding mechanisms. This allows for realistic and meaningful behaviors in the simulation. Partial Observability Framework Agents operate with limited knowledge of their environment. Exploration and interaction are required to uncover properties and expand their understanding. Web-Based Debugging Tool Visualize interactions, inspect entity states, and debug simulations in real time. Provides an accessible interface for monitoring and troubleshooting.","title":"Core Features"},{"location":"features/index.html#advanced-features","text":"Delegated Action Handling Specialized sub-agents manage specific types of actions (e.g., navigation, item manipulation). Fallback mechanisms ensure robustness when actions cannot be executed. Customizability Easily modify agents, entities, and scenarios to tailor simulations to your needs. Supports integration with various large language models, including lightweight local models. Scalability Optimized for small to medium-scale simulations on personal laptops. Designed to support larger setups for advanced research or commercial applications. Interpretable Logging Logs every interaction and state change, allowing users to analyze agent behaviors and simulation dynamics. Provides valuable insights for debugging and iterative development.","title":"Advanced Features"},{"location":"features/index.html#why-these-features-matter","text":"Token World\u2019s features are designed to: - Provide a dynamic and realistic environment for studying agent-based interactions. - Offer a flexible and extensible framework that adapts to a wide range of use cases. - Enable users to explore innovative applications in AI, gaming, education, and research. Ready to start using these features? Check out the Quick Start Guide to get up and running!","title":"Why These Features Matter"},{"location":"features/dynamic_mechanics.html","text":"Page under construction...","title":"Dynamic Mechanics Generation"},{"location":"features/grounding.html","text":"Page under construction...","title":"Grounding Mechanisms"},{"location":"features/partial_observability.html","text":"Page under construction...","title":"Partial Observability"},{"location":"getting_started/installation.html","text":"Installation \u00b6 This guide will help you set up Token World on your system and prepare you to start creating simulations. Refer README.md#setup for details on setup and installation. Next Steps \u00b6 Now that Token World is installed, you\u2019re ready to start building simulations! Head over to the Quick Start Guide to run your first simulation.","title":"Installation"},{"location":"getting_started/installation.html#installation","text":"This guide will help you set up Token World on your system and prepare you to start creating simulations. Refer README.md#setup for details on setup and installation.","title":"Installation"},{"location":"getting_started/installation.html#next-steps","text":"Now that Token World is installed, you\u2019re ready to start building simulations! Head over to the Quick Start Guide to run your first simulation.","title":"Next Steps"},{"location":"getting_started/quick_start.html","text":"Quick Start Guide \u00b6 This guide will walk you through running your first simulation in Token World . Follow these steps to set up a basic environment, initialize agents, and observe interactions. WARNING: The below steps are for illustrative purposes only and not meant to serve as actual instructions Step 1: Prepare the Environment \u00b6 Ensure that Token World is properly installed on your system. If you haven\u2019t set it up yet, refer to the Installation Guide . Step 2: Launch the Simulation \u00b6 Run the following command to start a pre-configured simulation: <Missing documentation> This will initialize a small-town scenario with a few agents and entities interacting in a dynamic environment. Step 3: Observe the Output \u00b6 As the simulation runs, you\u2019ll see logs showing: - Agent Actions : What actions each agent is performing. - State Changes : Updates to entities based on agent interactions. - New Mechanics : Dynamically generated mechanics triggered by agent behaviors. Example: <Missing documentation> [Agent: Alice] Action: \"Eat apple.\" [Environment] Preconditions met. Action executed. [Entity: Apple] Removed from environment. [Agent: Alice] Hunger reduced by 20 points. Step 4: Customize Your Simulation \u00b6 Interact with the master environment agent to customize your simulation. For example: - Add new agents with unique personality prompts. - Define new entities with specific properties. - Set global simulation parameters like time steps or logging verbosity. (Not implemented yet) Step 5: Visualize Interactions \u00b6 Start the web-based debugging tool to observe agent interactions in real time: <Missing documentation> Access the tool in your browser at: http://localhost:5000 Step 6: Experiment and Iterate \u00b6 Token World is designed for exploration. Experiment with: - Adding complex scenarios. - Creating new mechanics. - Tuning agent behaviors. Next Steps \u00b6 Once you\u2019re comfortable with the basics, explore the Examples section to dive into more advanced simulations and use cases.","title":"Quick Start Guide"},{"location":"getting_started/quick_start.html#quick-start-guide","text":"This guide will walk you through running your first simulation in Token World . Follow these steps to set up a basic environment, initialize agents, and observe interactions. WARNING: The below steps are for illustrative purposes only and not meant to serve as actual instructions","title":"Quick Start Guide"},{"location":"getting_started/quick_start.html#step-1-prepare-the-environment","text":"Ensure that Token World is properly installed on your system. If you haven\u2019t set it up yet, refer to the Installation Guide .","title":"Step 1: Prepare the Environment"},{"location":"getting_started/quick_start.html#step-2-launch-the-simulation","text":"Run the following command to start a pre-configured simulation: <Missing documentation> This will initialize a small-town scenario with a few agents and entities interacting in a dynamic environment.","title":"Step 2: Launch the Simulation"},{"location":"getting_started/quick_start.html#step-3-observe-the-output","text":"As the simulation runs, you\u2019ll see logs showing: - Agent Actions : What actions each agent is performing. - State Changes : Updates to entities based on agent interactions. - New Mechanics : Dynamically generated mechanics triggered by agent behaviors. Example: <Missing documentation> [Agent: Alice] Action: \"Eat apple.\" [Environment] Preconditions met. Action executed. [Entity: Apple] Removed from environment. [Agent: Alice] Hunger reduced by 20 points.","title":"Step 3: Observe the Output"},{"location":"getting_started/quick_start.html#step-4-customize-your-simulation","text":"Interact with the master environment agent to customize your simulation. For example: - Add new agents with unique personality prompts. - Define new entities with specific properties. - Set global simulation parameters like time steps or logging verbosity. (Not implemented yet)","title":"Step 4: Customize Your Simulation"},{"location":"getting_started/quick_start.html#step-5-visualize-interactions","text":"Start the web-based debugging tool to observe agent interactions in real time: <Missing documentation> Access the tool in your browser at: http://localhost:5000","title":"Step 5: Visualize Interactions"},{"location":"getting_started/quick_start.html#step-6-experiment-and-iterate","text":"Token World is designed for exploration. Experiment with: - Adding complex scenarios. - Creating new mechanics. - Tuning agent behaviors.","title":"Step 6: Experiment and Iterate"},{"location":"getting_started/quick_start.html#next-steps","text":"Once you\u2019re comfortable with the basics, explore the Examples section to dive into more advanced simulations and use cases.","title":"Next Steps"},{"location":"technical/action_validation.html","text":"Action Validation \u00b6 Action validation is a critical component of Token World, ensuring that agent actions are grounded, logical, and impactful. This section dives into how the framework processes, validates, and executes actions generated by agents. Workflow: Action Validation \u00b6 Action Generation Agents generate natural language actions based on their goals and the environment. Example: \"Harvest apples from the tree.\" Precondition Check The environment validates whether the action is feasible by checking preconditions against the relevant entities. Example: The tree must have apples available. The agent must possess a tool if required. Effect Application If preconditions are met, the environment applies the action\u2019s effects, updating the states of entities and agents. Example: Apples are removed from the tree. The agent\u2019s inventory is updated to include apples. Logging and Feedback The result of the action (success or failure) is logged. If the action fails, feedback is provided to help agents adjust their goals. Precondition and Effect Examples \u00b6 Example 1: Eating an Apple \u00b6 Preconditions : The agent must have an \"isPerson\" property. The entity (apple) must have an \"isEdible\" property. Effects : The entity is removed from the environment. The agent\u2019s hunger is reduced by the apple\u2019s calorie value. Example 2: Building a Shelter \u00b6 Preconditions : The agent must have \"isBuilder\" as a property. The environment must have enough \"Wood\" and \"Stone\" resources. Effects : Resources are consumed. A new entity (\"Shelter\") is added to the environment. Dynamic Mechanic Generation \u00b6 Token World dynamically generates new mechanics when agents perform novel actions. Example: - Action : \"Explore the forest.\" - Preconditions : Forest entity must exist, and the agent must have a \"curiosity\" trait. - Effects : - New resources (e.g., trees) are discovered with wood properties. Error Handling \u00b6 Failed Preconditions \u00b6 Scenario : Agent attempts to eat an apple, but the apple is not available. Response : Log the failure and provide feedback to the agent, such as \"Apple not found.\" Invalid Actions \u00b6 Scenario : Agent tries to \"fly,\" but no flying mechanic exists. Response : The action is rejected, and feedback is provided: \"Action unsupported.\" Extending Action Validation \u00b6 Adding New Actions Define preconditions and effects for new actions in the actions module. Custom Grounding Logic Extend the grounding module to introduce new validation mechanisms. Action-Specific Rules Add scenario-specific rules in the config/rules.json file. Next Steps \u00b6 For more details, explore: - Environment Design - Sub-Agent Delegation","title":"Action Validation"},{"location":"technical/action_validation.html#action-validation","text":"Action validation is a critical component of Token World, ensuring that agent actions are grounded, logical, and impactful. This section dives into how the framework processes, validates, and executes actions generated by agents.","title":"Action Validation"},{"location":"technical/action_validation.html#workflow-action-validation","text":"Action Generation Agents generate natural language actions based on their goals and the environment. Example: \"Harvest apples from the tree.\" Precondition Check The environment validates whether the action is feasible by checking preconditions against the relevant entities. Example: The tree must have apples available. The agent must possess a tool if required. Effect Application If preconditions are met, the environment applies the action\u2019s effects, updating the states of entities and agents. Example: Apples are removed from the tree. The agent\u2019s inventory is updated to include apples. Logging and Feedback The result of the action (success or failure) is logged. If the action fails, feedback is provided to help agents adjust their goals.","title":"Workflow: Action Validation"},{"location":"technical/action_validation.html#precondition-and-effect-examples","text":"","title":"Precondition and Effect Examples"},{"location":"technical/action_validation.html#example-1-eating-an-apple","text":"Preconditions : The agent must have an \"isPerson\" property. The entity (apple) must have an \"isEdible\" property. Effects : The entity is removed from the environment. The agent\u2019s hunger is reduced by the apple\u2019s calorie value.","title":"Example 1: Eating an Apple"},{"location":"technical/action_validation.html#example-2-building-a-shelter","text":"Preconditions : The agent must have \"isBuilder\" as a property. The environment must have enough \"Wood\" and \"Stone\" resources. Effects : Resources are consumed. A new entity (\"Shelter\") is added to the environment.","title":"Example 2: Building a Shelter"},{"location":"technical/action_validation.html#dynamic-mechanic-generation","text":"Token World dynamically generates new mechanics when agents perform novel actions. Example: - Action : \"Explore the forest.\" - Preconditions : Forest entity must exist, and the agent must have a \"curiosity\" trait. - Effects : - New resources (e.g., trees) are discovered with wood properties.","title":"Dynamic Mechanic Generation"},{"location":"technical/action_validation.html#error-handling","text":"","title":"Error Handling"},{"location":"technical/action_validation.html#failed-preconditions","text":"Scenario : Agent attempts to eat an apple, but the apple is not available. Response : Log the failure and provide feedback to the agent, such as \"Apple not found.\"","title":"Failed Preconditions"},{"location":"technical/action_validation.html#invalid-actions","text":"Scenario : Agent tries to \"fly,\" but no flying mechanic exists. Response : The action is rejected, and feedback is provided: \"Action unsupported.\"","title":"Invalid Actions"},{"location":"technical/action_validation.html#extending-action-validation","text":"Adding New Actions Define preconditions and effects for new actions in the actions module. Custom Grounding Logic Extend the grounding module to introduce new validation mechanisms. Action-Specific Rules Add scenario-specific rules in the config/rules.json file.","title":"Extending Action Validation"},{"location":"technical/action_validation.html#next-steps","text":"For more details, explore: - Environment Design - Sub-Agent Delegation","title":"Next Steps"},{"location":"technical/architecture.html","text":"Architecture Overview \u00b6 Token World is designed with modularity, scalability, and flexibility in mind. This section provides an in-depth look at the framework's architecture, including its core components and how they interact. Core Components \u00b6 Agents Represent autonomous entities in the simulation. Defined by their roles , personalities , and abilities . Generate natural language actions that interact with the environment. Environment The simulation\u2019s central system, managing entities and grounding agent actions. Handles preconditions, effects, and updates for all interactions. Dynamically adapts as new mechanics are generated during the simulation. Entities Represent objects, resources, and structures in the simulation. Stored in an SQLite database for efficient querying and state management. Defined by unique properties and attributes. Grounding Mechanisms Validate agent actions by checking preconditions and applying effects. Ensure logical consistency and prevent hallucinations. Dynamically generate new mechanics as needed. Debugging Tool Provides a real-time interface for observing agent interactions and entity states. Designed to help troubleshoot and analyze complex scenarios. System Workflow \u00b6 Agent Action Generation Agents use large language models (LLMs) to generate natural language actions. Example: \"Plant crops in the field.\" Action Validation The environment validates the action using grounding mechanisms: Checks preconditions (e.g., field must be empty). Applies effects (e.g., crops are planted, field state updated). State Updates Entities are updated based on the action's effects. Example: Field\u2019s status changes to \"planted,\" and crops are added as new entities. Dynamic Evolution New mechanics are generated on demand. Example: If agents discover a forest, new interactions like \"chop wood\" become available. Logging and Visualization All interactions and state changes are logged. The debugging tool provides a graphical interface for real-time analysis. Modular Design \u00b6 Token World is built with modularity to enable easy extension and customization: Agents Module : Define agent roles, behaviors, and actions. Environment Module : Manages entities, actions, and mechanics. Grounding Module : Validates and executes actions. Web Interface : Debugging tool built using Flask for visualization. Scalability \u00b6 Local Simulations : Optimized for small to medium-scale simulations on personal laptops. Distributed Systems : Can be extended for larger simulations using distributed architectures. Model Flexibility : Supports lightweight LLMs for efficiency, with the option to integrate more powerful models as needed. Diagram: System Architecture \u00b6 (Include a simple diagram showing the flow of data between agents, the environment, entities, and grounding mechanisms.) Next Steps \u00b6 Explore specific technical details: - Action Validation - Environment Design - Sub-Agent Delegation","title":"Architecture"},{"location":"technical/architecture.html#architecture-overview","text":"Token World is designed with modularity, scalability, and flexibility in mind. This section provides an in-depth look at the framework's architecture, including its core components and how they interact.","title":"Architecture Overview"},{"location":"technical/architecture.html#core-components","text":"Agents Represent autonomous entities in the simulation. Defined by their roles , personalities , and abilities . Generate natural language actions that interact with the environment. Environment The simulation\u2019s central system, managing entities and grounding agent actions. Handles preconditions, effects, and updates for all interactions. Dynamically adapts as new mechanics are generated during the simulation. Entities Represent objects, resources, and structures in the simulation. Stored in an SQLite database for efficient querying and state management. Defined by unique properties and attributes. Grounding Mechanisms Validate agent actions by checking preconditions and applying effects. Ensure logical consistency and prevent hallucinations. Dynamically generate new mechanics as needed. Debugging Tool Provides a real-time interface for observing agent interactions and entity states. Designed to help troubleshoot and analyze complex scenarios.","title":"Core Components"},{"location":"technical/architecture.html#system-workflow","text":"Agent Action Generation Agents use large language models (LLMs) to generate natural language actions. Example: \"Plant crops in the field.\" Action Validation The environment validates the action using grounding mechanisms: Checks preconditions (e.g., field must be empty). Applies effects (e.g., crops are planted, field state updated). State Updates Entities are updated based on the action's effects. Example: Field\u2019s status changes to \"planted,\" and crops are added as new entities. Dynamic Evolution New mechanics are generated on demand. Example: If agents discover a forest, new interactions like \"chop wood\" become available. Logging and Visualization All interactions and state changes are logged. The debugging tool provides a graphical interface for real-time analysis.","title":"System Workflow"},{"location":"technical/architecture.html#modular-design","text":"Token World is built with modularity to enable easy extension and customization: Agents Module : Define agent roles, behaviors, and actions. Environment Module : Manages entities, actions, and mechanics. Grounding Module : Validates and executes actions. Web Interface : Debugging tool built using Flask for visualization.","title":"Modular Design"},{"location":"technical/architecture.html#scalability","text":"Local Simulations : Optimized for small to medium-scale simulations on personal laptops. Distributed Systems : Can be extended for larger simulations using distributed architectures. Model Flexibility : Supports lightweight LLMs for efficiency, with the option to integrate more powerful models as needed.","title":"Scalability"},{"location":"technical/architecture.html#diagram-system-architecture","text":"(Include a simple diagram showing the flow of data between agents, the environment, entities, and grounding mechanisms.)","title":"Diagram: System Architecture"},{"location":"technical/architecture.html#next-steps","text":"Explore specific technical details: - Action Validation - Environment Design - Sub-Agent Delegation","title":"Next Steps"},{"location":"technical/environment.html","text":"Environment Design \u00b6 The environment is the central hub of Token World, where agents, entities, and rules interact. This section explores how the environment is structured, its role in the simulation, and how it adapts dynamically based on agent actions. Key Responsibilities of the Environment \u00b6 Entity Management Maintains a database of all entities in the simulation. Tracks entity states and ensures they are updated based on agent actions. Action Validation Validates actions generated by agents using preconditions and effects. Ensures logical consistency between agents and the environment. Dynamic Mechanic Generation Adapts to agent behaviors by introducing new mechanics or interactions as needed. Example: Agents discovering a new area might unlock novel actions like \"mine ore.\" State Logging Logs all interactions, state changes, and errors for debugging and analysis. Structure of the Environment \u00b6 Entity Storage Entities are stored in an SQLite database for efficient querying and state management. Each entity has: Unique ID : Identifier for the entity. Properties : Attributes like isEdible , quantity , or durability . Relationships : Links to other entities or agents. Example: json { \"id\": \"tree_001\", \"name\": \"Tree\", \"properties\": { \"canGrowFruit\": true, \"fruitType\": \"Apple\", \"health\": 100 } } Grounding Mechanisms These ensure that agent actions are feasible by: Checking entity properties and relationships. Enforcing scenario-specific rules. Rules Engine Defines global constraints and dynamics: Resource Regeneration : Rules for replenishing depleted resources. Time Steps : Defines how the environment evolves over time. Example rule configuration: json { \"rules\": { \"maxTimeSteps\": 50, \"resourceRegeneration\": { \"enabled\": true, \"rate\": 10 } } } Dynamic Environment Evolution \u00b6 The environment evolves as agents interact with it. Examples include: 1. New Resource Discovery Agents exploring an unknown area might trigger the addition of new resources or entities. 2. State Propagation Changes to one entity can cascade to related entities. Example: Cutting down a tree may deplete the fruit it provides. Error Handling in the Environment \u00b6 Missing Entities Scenario : Agent references a nonexistent entity. Response : Logs an error and skips the action. Invalid State Changes Scenario : Action attempts to modify an entity in an unsupported way. Response : Rejects the action and provides feedback. Extending the Environment \u00b6 Adding New Entity Types Define entities with unique properties in the config/entities.json file. Custom Rules Extend config/rules.json to add global constraints or dynamic behaviors. Environment Behaviors Add custom logic for entity interactions in the environment module. Next Steps \u00b6 For more insights, explore: - Action Validation - Sub-Agent Delegation","title":"Environment Design"},{"location":"technical/environment.html#environment-design","text":"The environment is the central hub of Token World, where agents, entities, and rules interact. This section explores how the environment is structured, its role in the simulation, and how it adapts dynamically based on agent actions.","title":"Environment Design"},{"location":"technical/environment.html#key-responsibilities-of-the-environment","text":"Entity Management Maintains a database of all entities in the simulation. Tracks entity states and ensures they are updated based on agent actions. Action Validation Validates actions generated by agents using preconditions and effects. Ensures logical consistency between agents and the environment. Dynamic Mechanic Generation Adapts to agent behaviors by introducing new mechanics or interactions as needed. Example: Agents discovering a new area might unlock novel actions like \"mine ore.\" State Logging Logs all interactions, state changes, and errors for debugging and analysis.","title":"Key Responsibilities of the Environment"},{"location":"technical/environment.html#structure-of-the-environment","text":"Entity Storage Entities are stored in an SQLite database for efficient querying and state management. Each entity has: Unique ID : Identifier for the entity. Properties : Attributes like isEdible , quantity , or durability . Relationships : Links to other entities or agents. Example: json { \"id\": \"tree_001\", \"name\": \"Tree\", \"properties\": { \"canGrowFruit\": true, \"fruitType\": \"Apple\", \"health\": 100 } } Grounding Mechanisms These ensure that agent actions are feasible by: Checking entity properties and relationships. Enforcing scenario-specific rules. Rules Engine Defines global constraints and dynamics: Resource Regeneration : Rules for replenishing depleted resources. Time Steps : Defines how the environment evolves over time. Example rule configuration: json { \"rules\": { \"maxTimeSteps\": 50, \"resourceRegeneration\": { \"enabled\": true, \"rate\": 10 } } }","title":"Structure of the Environment"},{"location":"technical/environment.html#dynamic-environment-evolution","text":"The environment evolves as agents interact with it. Examples include: 1. New Resource Discovery Agents exploring an unknown area might trigger the addition of new resources or entities. 2. State Propagation Changes to one entity can cascade to related entities. Example: Cutting down a tree may deplete the fruit it provides.","title":"Dynamic Environment Evolution"},{"location":"technical/environment.html#error-handling-in-the-environment","text":"Missing Entities Scenario : Agent references a nonexistent entity. Response : Logs an error and skips the action. Invalid State Changes Scenario : Action attempts to modify an entity in an unsupported way. Response : Rejects the action and provides feedback.","title":"Error Handling in the Environment"},{"location":"technical/environment.html#extending-the-environment","text":"Adding New Entity Types Define entities with unique properties in the config/entities.json file. Custom Rules Extend config/rules.json to add global constraints or dynamic behaviors. Environment Behaviors Add custom logic for entity interactions in the environment module.","title":"Extending the Environment"},{"location":"technical/environment.html#next-steps","text":"For more insights, explore: - Action Validation - Sub-Agent Delegation","title":"Next Steps"},{"location":"technical/sub_agents.html","text":"Sub-environment Delegation \u00b6 Token World employs specialized sub-environments to handle specific types of actions, ensuring that complex interactions are processed efficiently and logically. This section details how sub-environment delegation works, the types of sub-environments available, and how you can extend or customize them. What Are Sub-environments? \u00b6 Sub-environments are specialized modules designed to: 1. Process specific categories of actions (e.g., navigation, crafting, trading). 2. Ensure efficient handling of tasks by delegating responsibilities. 3. Provide fallback mechanisms for unsupported or failed actions. Workflow: Sub-environment Delegation \u00b6 Action Identification An agent generates an action (e.g., \"Trade apples with Bob.\" ). The environment identifies the action type and delegates it to the appropriate sub-environment. Sub-environment Processing The sub-environment validates the action\u2019s feasibility (e.g., checks if Bob has apples to trade). Executes the action and applies its effects to the entities involved. Fallback Mechanisms If a sub-environment cannot process the action, it either: Marks the action as failed, or Provides feedback to the main agent for adjustment. Types of Sub-environments \u00b6 1. Navigation Sub-environment \u00b6 Handles actions related to movement and exploration. Examples: \"Move to the forest.\" \"Explore the cave.\" 2. Crafting Sub-environment \u00b6 Processes crafting-related actions. Examples: \"Craft a sword using iron and wood.\" \"Repair the plow.\" 3. Trading Sub-environment \u00b6 Manages trade and barter actions between agents. Examples: \"Trade apples with Bob for coins.\" \"Sell iron ore to the blacksmith.\" 4. Combat Sub-environment \u00b6 Handles combat-related interactions. Examples: \"Attack the goblin with a sword.\" \"Defend against the dragon\u2019s fire breath.\" Error Handling \u00b6 Unsupported Actions If no sub-environment can process the action, it is marked as unsupported. Feedback is logged for debugging. Failed Preconditions Sub-environments log detailed errors when preconditions for actions are not met. Use Cases for Sub-environments \u00b6 Modular Design : Separate concerns for different action types. Complex Scenarios : Handle intricate interactions like multi-step quests. Extensibility : Easily add or modify sub-environments to introduce new behaviors. Next Steps \u00b6 To learn more about how sub-environments interact with the environment and main agents, explore: - Environment Design - Action Validation","title":"Sub-Agent Delegation"},{"location":"technical/sub_agents.html#sub-environment-delegation","text":"Token World employs specialized sub-environments to handle specific types of actions, ensuring that complex interactions are processed efficiently and logically. This section details how sub-environment delegation works, the types of sub-environments available, and how you can extend or customize them.","title":"Sub-environment Delegation"},{"location":"technical/sub_agents.html#what-are-sub-environments","text":"Sub-environments are specialized modules designed to: 1. Process specific categories of actions (e.g., navigation, crafting, trading). 2. Ensure efficient handling of tasks by delegating responsibilities. 3. Provide fallback mechanisms for unsupported or failed actions.","title":"What Are Sub-environments?"},{"location":"technical/sub_agents.html#workflow-sub-environment-delegation","text":"Action Identification An agent generates an action (e.g., \"Trade apples with Bob.\" ). The environment identifies the action type and delegates it to the appropriate sub-environment. Sub-environment Processing The sub-environment validates the action\u2019s feasibility (e.g., checks if Bob has apples to trade). Executes the action and applies its effects to the entities involved. Fallback Mechanisms If a sub-environment cannot process the action, it either: Marks the action as failed, or Provides feedback to the main agent for adjustment.","title":"Workflow: Sub-environment Delegation"},{"location":"technical/sub_agents.html#types-of-sub-environments","text":"","title":"Types of Sub-environments"},{"location":"technical/sub_agents.html#1-navigation-sub-environment","text":"Handles actions related to movement and exploration. Examples: \"Move to the forest.\" \"Explore the cave.\"","title":"1. Navigation Sub-environment"},{"location":"technical/sub_agents.html#2-crafting-sub-environment","text":"Processes crafting-related actions. Examples: \"Craft a sword using iron and wood.\" \"Repair the plow.\"","title":"2. Crafting Sub-environment"},{"location":"technical/sub_agents.html#3-trading-sub-environment","text":"Manages trade and barter actions between agents. Examples: \"Trade apples with Bob for coins.\" \"Sell iron ore to the blacksmith.\"","title":"3. Trading Sub-environment"},{"location":"technical/sub_agents.html#4-combat-sub-environment","text":"Handles combat-related interactions. Examples: \"Attack the goblin with a sword.\" \"Defend against the dragon\u2019s fire breath.\"","title":"4. Combat Sub-environment"},{"location":"technical/sub_agents.html#error-handling","text":"Unsupported Actions If no sub-environment can process the action, it is marked as unsupported. Feedback is logged for debugging. Failed Preconditions Sub-environments log detailed errors when preconditions for actions are not met.","title":"Error Handling"},{"location":"technical/sub_agents.html#use-cases-for-sub-environments","text":"Modular Design : Separate concerns for different action types. Complex Scenarios : Handle intricate interactions like multi-step quests. Extensibility : Easily add or modify sub-environments to introduce new behaviors.","title":"Use Cases for Sub-environments"},{"location":"technical/sub_agents.html#next-steps","text":"To learn more about how sub-environments interact with the environment and main agents, explore: - Environment Design - Action Validation","title":"Next Steps"},{"location":"usage/customization.html","text":"Customization Guide \u00b6 Token World is designed to be highly flexible, allowing you to create unique simulations tailored to your needs. This guide explains how to customize agents, entities, and global settings to build your ideal simulation. WARNING: The below steps are for illustrative purposes only and not meant to serve as actual instructions Customizing Agents \u00b6 Agents are the core of Token World, driving interactions within the environment. You can define agents in the configuration file. Adding a New Agent \u00b6 To add a new agent, ask the environment agent. Each agent requires: - Name : A unique identifier for the agent. - Role : The agent\u2019s role in the simulation. - Personality : A prompt describing the agent's behavior and goals. Customizing Entities \u00b6 Entities are objects in the environment that agents interact with. You can define entities with properties that govern their behavior. Adding a New Entity \u00b6 To add entities, ask the environment agent. Each entity requires: - Name : A unique identifier. - Properties : Key-value pairs defining its attributes. Example: { \"name\" : \"Apple\" , \"properties\" : { \"isEdible\" : true , \"calories\" : 50 } } { \"name\" : \"Tree\" , \"properties\" : { \"canGrowFruit\" : true , \"height\" : 5 } } Customizing Global Settings \u00b6 Global settings define the overall simulation parameters, such as: - Time Steps : Number of iterations for the simulation. - Logging Level : Verbosity of simulation output. - Debug Mode : Whether debugging tools are active. Editing Global Settings \u00b6 Modify the <missing documentation> file to adjust these parameters. Example: \"settings\" : { \"timeSteps\" : 100 , \"loggingLevel\" : \"verbose\" , \"debugMode\" : true } Extending Functionality \u00b6 WARNING: The below steps are for illustrative purposes only and not meant to serve as actual instructions For advanced customization, you can: 1. Add new actions or behaviors in the src/actions folder. 2. Define new grounding mechanisms in the src/grounding module. 3. Create new debugging features in the web/ directory. Next Steps \u00b6 Once you've customized your agents and entities, explore the Examples section to see how these customizations can bring your scenarios to life!","title":"Customization"},{"location":"usage/customization.html#customization-guide","text":"Token World is designed to be highly flexible, allowing you to create unique simulations tailored to your needs. This guide explains how to customize agents, entities, and global settings to build your ideal simulation. WARNING: The below steps are for illustrative purposes only and not meant to serve as actual instructions","title":"Customization Guide"},{"location":"usage/customization.html#customizing-agents","text":"Agents are the core of Token World, driving interactions within the environment. You can define agents in the configuration file.","title":"Customizing Agents"},{"location":"usage/customization.html#adding-a-new-agent","text":"To add a new agent, ask the environment agent. Each agent requires: - Name : A unique identifier for the agent. - Role : The agent\u2019s role in the simulation. - Personality : A prompt describing the agent's behavior and goals.","title":"Adding a New Agent"},{"location":"usage/customization.html#customizing-entities","text":"Entities are objects in the environment that agents interact with. You can define entities with properties that govern their behavior.","title":"Customizing Entities"},{"location":"usage/customization.html#adding-a-new-entity","text":"To add entities, ask the environment agent. Each entity requires: - Name : A unique identifier. - Properties : Key-value pairs defining its attributes. Example: { \"name\" : \"Apple\" , \"properties\" : { \"isEdible\" : true , \"calories\" : 50 } } { \"name\" : \"Tree\" , \"properties\" : { \"canGrowFruit\" : true , \"height\" : 5 } }","title":"Adding a New Entity"},{"location":"usage/customization.html#customizing-global-settings","text":"Global settings define the overall simulation parameters, such as: - Time Steps : Number of iterations for the simulation. - Logging Level : Verbosity of simulation output. - Debug Mode : Whether debugging tools are active.","title":"Customizing Global Settings"},{"location":"usage/customization.html#editing-global-settings","text":"Modify the <missing documentation> file to adjust these parameters. Example: \"settings\" : { \"timeSteps\" : 100 , \"loggingLevel\" : \"verbose\" , \"debugMode\" : true }","title":"Editing Global Settings"},{"location":"usage/customization.html#extending-functionality","text":"WARNING: The below steps are for illustrative purposes only and not meant to serve as actual instructions For advanced customization, you can: 1. Add new actions or behaviors in the src/actions folder. 2. Define new grounding mechanisms in the src/grounding module. 3. Create new debugging features in the web/ directory.","title":"Extending Functionality"},{"location":"usage/customization.html#next-steps","text":"Once you've customized your agents and entities, explore the Examples section to see how these customizations can bring your scenarios to life!","title":"Next Steps"},{"location":"usage/debugging_tool.html","text":"Debugging Tool \u00b6 Token World includes a web-based debugging tool to help you visualize and analyze agent interactions, entity states, and simulation progress in real time. This tool is designed to provide transparency and facilitate troubleshooting for complex simulations. Features \u00b6 The debugging tool offers: 1. Real-Time Interaction Logs : - Monitor actions performed by agents and their outcomes. - View precondition checks and state changes for each interaction. Entity State Viewer : Inspect properties of all entities in the environment. Track dynamic updates to entity states during the simulation. Visualization Dashboard : Display the simulation environment graphically (if configured). Show relationships and dependencies between agents and entities. Error Reporting : Highlight failed actions and their causes. Provide suggestions for resolving common issues. Launching the Debugging Tool \u00b6 WARNING: The below steps are for illustrative purposes only and not meant to serve as actual instructions Ensure you have Flask and Flask-SocketIO installed: bash pip install flask flask-socketio Start the debugging tool server: bash python run_web_debugger.py Open your browser and navigate to: http://localhost:5000 Using the Debugging Tool \u00b6 Navigation \u00b6 The tool provides a simple interface with the following sections: - Home : Overview of the simulation status. - Agents : List of all agents, their actions, and current states. - Entities : Properties and states of all entities in the environment. - Logs : Chronological list of interactions, errors, and events. Example Workflow \u00b6 Start your simulation: bash <Missing documentation> Open the debugging tool in your browser. Monitor actions in the Logs tab to verify that agents are performing as expected. Use the Entities tab to inspect properties like resource quantities or tool durability. Check the Agents tab to view agent-specific stats and behaviors. Debugging Tips \u00b6 Failed Actions : Review the preconditions for the failed action in the logs. Verify that the referenced entities exist and meet the required criteria. Unexpected Behaviors : Use the state viewer to confirm entity properties. Ensure that agent prompts and roles align with expected behaviors. Simulation Stalls : Check for cyclic dependencies or insufficient resources in the environment. Next Steps \u00b6 Once you\u2019ve resolved issues using the debugging tool, explore advanced simulation configurations in the Customization Guide or dive into Examples to see the tool in action.","title":"Debugging Tool"},{"location":"usage/debugging_tool.html#debugging-tool","text":"Token World includes a web-based debugging tool to help you visualize and analyze agent interactions, entity states, and simulation progress in real time. This tool is designed to provide transparency and facilitate troubleshooting for complex simulations.","title":"Debugging Tool"},{"location":"usage/debugging_tool.html#features","text":"The debugging tool offers: 1. Real-Time Interaction Logs : - Monitor actions performed by agents and their outcomes. - View precondition checks and state changes for each interaction. Entity State Viewer : Inspect properties of all entities in the environment. Track dynamic updates to entity states during the simulation. Visualization Dashboard : Display the simulation environment graphically (if configured). Show relationships and dependencies between agents and entities. Error Reporting : Highlight failed actions and their causes. Provide suggestions for resolving common issues.","title":"Features"},{"location":"usage/debugging_tool.html#launching-the-debugging-tool","text":"WARNING: The below steps are for illustrative purposes only and not meant to serve as actual instructions Ensure you have Flask and Flask-SocketIO installed: bash pip install flask flask-socketio Start the debugging tool server: bash python run_web_debugger.py Open your browser and navigate to: http://localhost:5000","title":"Launching the Debugging Tool"},{"location":"usage/debugging_tool.html#using-the-debugging-tool","text":"","title":"Using the Debugging Tool"},{"location":"usage/debugging_tool.html#navigation","text":"The tool provides a simple interface with the following sections: - Home : Overview of the simulation status. - Agents : List of all agents, their actions, and current states. - Entities : Properties and states of all entities in the environment. - Logs : Chronological list of interactions, errors, and events.","title":"Navigation"},{"location":"usage/debugging_tool.html#example-workflow","text":"Start your simulation: bash <Missing documentation> Open the debugging tool in your browser. Monitor actions in the Logs tab to verify that agents are performing as expected. Use the Entities tab to inspect properties like resource quantities or tool durability. Check the Agents tab to view agent-specific stats and behaviors.","title":"Example Workflow"},{"location":"usage/debugging_tool.html#debugging-tips","text":"Failed Actions : Review the preconditions for the failed action in the logs. Verify that the referenced entities exist and meet the required criteria. Unexpected Behaviors : Use the state viewer to confirm entity properties. Ensure that agent prompts and roles align with expected behaviors. Simulation Stalls : Check for cyclic dependencies or insufficient resources in the environment.","title":"Debugging Tips"},{"location":"usage/debugging_tool.html#next-steps","text":"Once you\u2019ve resolved issues using the debugging tool, explore advanced simulation configurations in the Customization Guide or dive into Examples to see the tool in action.","title":"Next Steps"},{"location":"usage/examples/experimental.html","text":"Example: Experimental Scenarios \u00b6 This example explores how to create experimental scenarios in Token World , ideal for testing agentic workflows, studying emergent behaviors, or conducting academic research. These scenarios push the boundaries of what is possible in multi-agent simulations. WARNING: The below steps are for illustrative purposes only and not meant to serve as actual instructions Scenario Overview \u00b6 Experimental scenarios allow users to: - Simulate unconventional environments. - Observe emergent behaviors under specific constraints. - Test novel mechanics or agent interactions. Example use cases include: - Simulating resource competition among agents. - Exploring social dynamics in constrained environments. - Testing how agents adapt to evolving scenarios. Configuration \u00b6 Below is a sample configuration for an experimental scenario: Agents \u00b6 Define agents with diverse and conflicting goals: \"agents\" : [ { \"name\" : \"Agent A\" , \"role\" : \"Resource Collector\" , \"personality\" : \"Competitive and focused on maximizing resources.\" , \"abilities\" : { \"speed\" : 8 , \"efficiency\" : 10 } }, { \"name\" : \"Agent B\" , \"role\" : \"Collaborator\" , \"personality\" : \"Team-oriented, prefers working with others to achieve goals.\" , \"abilities\" : { \"communication\" : 10 , \"cooperation\" : 9 } }, { \"name\" : \"Agent C\" , \"role\" : \"Observer\" , \"personality\" : \"Curious and passive, gathers data on other agents' behaviors.\" } ] Entities \u00b6 Define experimental resources and environments: \"entities\" : [ { \"name\" : \"Resource Node\" , \"properties\" : { \"isHarvestable\" : true , \"quantity\" : 100 } }, { \"name\" : \"Barrier\" , \"properties\" : { \"isObstacle\" : true , \"canBeBypassed\" : false } } ] Rules \u00b6 Add global constraints or rules to shape the experiment: \"rules\" : { \"maxTimeSteps\" : 50 , \"resourceRegeneration\" : { \"enabled\" : true , \"rate\" : 5 }, \"collaborationBonus\" : { \"enabled\" : true , \"multiplier\" : 1.5 } } Running the Simulation \u00b6 Use the provided configuration files ( scenario.json , entities.json , and rules.json ). Start the simulation: bash python run_simulation.py Monitor agent behaviors and environmental changes. Example Interactions \u00b6 As the simulation progresses, you might observe: [Agent: Agent A] Action: \"Harvest resources from Node 1.\" [Environment] Preconditions met. Action executed. [Entity: Resource Node] Quantity reduced by 10. [Agent: Agent B] Action: \"Collaborate with Agent A.\" [Environment] Preconditions met. Collaboration bonus applied. Total resources harvested: 15. [Agent: Agent C] Action: \"Observe Agent A and Agent B's interaction.\" [Environment] Data logged for analysis. Experimentation Ideas \u00b6 Dynamic Rules : Change rules mid-simulation to observe how agents adapt. Unbalanced Scenarios : Provide more resources to certain agents to test competitive dynamics. Environmental Changes : Introduce new obstacles or opportunities during runtime. Next Steps \u00b6 After experimenting with this scenario, consider incorporating advanced features, such as Scalability or creating your own experimental setups for unique research goals.","title":"Experimental Scenarios"},{"location":"usage/examples/experimental.html#example-experimental-scenarios","text":"This example explores how to create experimental scenarios in Token World , ideal for testing agentic workflows, studying emergent behaviors, or conducting academic research. These scenarios push the boundaries of what is possible in multi-agent simulations. WARNING: The below steps are for illustrative purposes only and not meant to serve as actual instructions","title":"Example: Experimental Scenarios"},{"location":"usage/examples/experimental.html#scenario-overview","text":"Experimental scenarios allow users to: - Simulate unconventional environments. - Observe emergent behaviors under specific constraints. - Test novel mechanics or agent interactions. Example use cases include: - Simulating resource competition among agents. - Exploring social dynamics in constrained environments. - Testing how agents adapt to evolving scenarios.","title":"Scenario Overview"},{"location":"usage/examples/experimental.html#configuration","text":"Below is a sample configuration for an experimental scenario:","title":"Configuration"},{"location":"usage/examples/experimental.html#agents","text":"Define agents with diverse and conflicting goals: \"agents\" : [ { \"name\" : \"Agent A\" , \"role\" : \"Resource Collector\" , \"personality\" : \"Competitive and focused on maximizing resources.\" , \"abilities\" : { \"speed\" : 8 , \"efficiency\" : 10 } }, { \"name\" : \"Agent B\" , \"role\" : \"Collaborator\" , \"personality\" : \"Team-oriented, prefers working with others to achieve goals.\" , \"abilities\" : { \"communication\" : 10 , \"cooperation\" : 9 } }, { \"name\" : \"Agent C\" , \"role\" : \"Observer\" , \"personality\" : \"Curious and passive, gathers data on other agents' behaviors.\" } ]","title":"Agents"},{"location":"usage/examples/experimental.html#entities","text":"Define experimental resources and environments: \"entities\" : [ { \"name\" : \"Resource Node\" , \"properties\" : { \"isHarvestable\" : true , \"quantity\" : 100 } }, { \"name\" : \"Barrier\" , \"properties\" : { \"isObstacle\" : true , \"canBeBypassed\" : false } } ]","title":"Entities"},{"location":"usage/examples/experimental.html#rules","text":"Add global constraints or rules to shape the experiment: \"rules\" : { \"maxTimeSteps\" : 50 , \"resourceRegeneration\" : { \"enabled\" : true , \"rate\" : 5 }, \"collaborationBonus\" : { \"enabled\" : true , \"multiplier\" : 1.5 } }","title":"Rules"},{"location":"usage/examples/experimental.html#running-the-simulation","text":"Use the provided configuration files ( scenario.json , entities.json , and rules.json ). Start the simulation: bash python run_simulation.py Monitor agent behaviors and environmental changes.","title":"Running the Simulation"},{"location":"usage/examples/experimental.html#example-interactions","text":"As the simulation progresses, you might observe: [Agent: Agent A] Action: \"Harvest resources from Node 1.\" [Environment] Preconditions met. Action executed. [Entity: Resource Node] Quantity reduced by 10. [Agent: Agent B] Action: \"Collaborate with Agent A.\" [Environment] Preconditions met. Collaboration bonus applied. Total resources harvested: 15. [Agent: Agent C] Action: \"Observe Agent A and Agent B's interaction.\" [Environment] Data logged for analysis.","title":"Example Interactions"},{"location":"usage/examples/experimental.html#experimentation-ideas","text":"Dynamic Rules : Change rules mid-simulation to observe how agents adapt. Unbalanced Scenarios : Provide more resources to certain agents to test competitive dynamics. Environmental Changes : Introduce new obstacles or opportunities during runtime.","title":"Experimentation Ideas"},{"location":"usage/examples/experimental.html#next-steps","text":"After experimenting with this scenario, consider incorporating advanced features, such as Scalability or creating your own experimental setups for unique research goals.","title":"Next Steps"},{"location":"usage/examples/role_playing.html","text":"Example: Role-Playing Game (RPG) Simulation \u00b6 This example demonstrates how to set up a role-playing game (RPG) scenario in Token World. The RPG simulation involves agents with specific quests, abilities, and interactions in a richly defined environment. WARNING: The below steps are for illustrative purposes only and not meant to serve as actual instructions Scenario Overview \u00b6 The RPG simulation includes: - Agents : Heroes with distinct classes, abilities, and personalities. - Entities : Items, treasures, NPCs, and obstacles. - Interactions : Quest completion, combat, trading, and exploration. Configuration \u00b6 Below is the configuration for an RPG simulation: Agents \u00b6 Define the heroes in the RPG world: \"agents\" : [ { \"name\" : \"Thorin\" , \"role\" : \"Warrior\" , \"personality\" : \"Brave and loyal. Fights for honor and justice.\" , \"abilities\" : { \"strength\" : 10 , \"defense\" : 8 } }, { \"name\" : \"Lyra\" , \"role\" : \"Mage\" , \"personality\" : \"Wise and curious. Excels at casting powerful spells.\" , \"abilities\" : { \"intelligence\" : 10 , \"mana\" : 12 } }, { \"name\" : \"Rowan\" , \"role\" : \"Rogue\" , \"personality\" : \"Sneaky and resourceful. Skilled in stealth and agility.\" , \"abilities\" : { \"dexterity\" : 10 , \"stealth\" : 12 } } ] Entities \u00b6 Define the items and objects in the RPG world: \"entities\" : [ { \"name\" : \"Health Potion\" , \"properties\" : { \"isConsumable\" : true , \"healingValue\" : 20 } }, { \"name\" : \"Treasure Chest\" , \"properties\" : { \"isLootable\" : true , \"contents\" : [ \"Gold\" , \"Gemstones\" ] } }, { \"name\" : \"Goblin\" , \"properties\" : { \"isEnemy\" : true , \"strength\" : 5 , \"health\" : 30 } } ] Running the Simulation \u00b6 Use the provided configuration files ( scenario.json and entities.json ). Start the simulation: bash python run_simulation.py Observe the gameplay as agents complete quests and interact with the world. Example Interactions \u00b6 As the simulation progresses, you might see logs like: [Agent: Thorin] Action: \"Attack Goblin with sword.\" [Environment] Preconditions met. Action executed. [Entity: Goblin] Health reduced by 10. Current health: 20. [Agent: Lyra] Action: \"Cast fireball spell at Goblin.\" [Environment] Preconditions met. Action executed. [Entity: Goblin] Health reduced by 15. Current health: 5. [Agent: Rowan] Action: \"Loot Treasure Chest.\" [Environment] Preconditions met. Contents obtained: [Gold, Gemstones]. Experimentation Ideas \u00b6 Add New Quests : Introduce multi-step objectives for agents to complete. Expand Abilities : Add new skills, such as healing or crafting. Create Complex Environments : Define dungeons, forests, or towns with unique interactions. Next Steps \u00b6 Once you've explored the RPG simulation, try creating your own custom scenarios or move on to Experimental Scenarios for more advanced setups.","title":"Role-Playing Game"},{"location":"usage/examples/role_playing.html#example-role-playing-game-rpg-simulation","text":"This example demonstrates how to set up a role-playing game (RPG) scenario in Token World. The RPG simulation involves agents with specific quests, abilities, and interactions in a richly defined environment. WARNING: The below steps are for illustrative purposes only and not meant to serve as actual instructions","title":"Example: Role-Playing Game (RPG) Simulation"},{"location":"usage/examples/role_playing.html#scenario-overview","text":"The RPG simulation includes: - Agents : Heroes with distinct classes, abilities, and personalities. - Entities : Items, treasures, NPCs, and obstacles. - Interactions : Quest completion, combat, trading, and exploration.","title":"Scenario Overview"},{"location":"usage/examples/role_playing.html#configuration","text":"Below is the configuration for an RPG simulation:","title":"Configuration"},{"location":"usage/examples/role_playing.html#agents","text":"Define the heroes in the RPG world: \"agents\" : [ { \"name\" : \"Thorin\" , \"role\" : \"Warrior\" , \"personality\" : \"Brave and loyal. Fights for honor and justice.\" , \"abilities\" : { \"strength\" : 10 , \"defense\" : 8 } }, { \"name\" : \"Lyra\" , \"role\" : \"Mage\" , \"personality\" : \"Wise and curious. Excels at casting powerful spells.\" , \"abilities\" : { \"intelligence\" : 10 , \"mana\" : 12 } }, { \"name\" : \"Rowan\" , \"role\" : \"Rogue\" , \"personality\" : \"Sneaky and resourceful. Skilled in stealth and agility.\" , \"abilities\" : { \"dexterity\" : 10 , \"stealth\" : 12 } } ]","title":"Agents"},{"location":"usage/examples/role_playing.html#entities","text":"Define the items and objects in the RPG world: \"entities\" : [ { \"name\" : \"Health Potion\" , \"properties\" : { \"isConsumable\" : true , \"healingValue\" : 20 } }, { \"name\" : \"Treasure Chest\" , \"properties\" : { \"isLootable\" : true , \"contents\" : [ \"Gold\" , \"Gemstones\" ] } }, { \"name\" : \"Goblin\" , \"properties\" : { \"isEnemy\" : true , \"strength\" : 5 , \"health\" : 30 } } ]","title":"Entities"},{"location":"usage/examples/role_playing.html#running-the-simulation","text":"Use the provided configuration files ( scenario.json and entities.json ). Start the simulation: bash python run_simulation.py Observe the gameplay as agents complete quests and interact with the world.","title":"Running the Simulation"},{"location":"usage/examples/role_playing.html#example-interactions","text":"As the simulation progresses, you might see logs like: [Agent: Thorin] Action: \"Attack Goblin with sword.\" [Environment] Preconditions met. Action executed. [Entity: Goblin] Health reduced by 10. Current health: 20. [Agent: Lyra] Action: \"Cast fireball spell at Goblin.\" [Environment] Preconditions met. Action executed. [Entity: Goblin] Health reduced by 15. Current health: 5. [Agent: Rowan] Action: \"Loot Treasure Chest.\" [Environment] Preconditions met. Contents obtained: [Gold, Gemstones].","title":"Example Interactions"},{"location":"usage/examples/role_playing.html#experimentation-ideas","text":"Add New Quests : Introduce multi-step objectives for agents to complete. Expand Abilities : Add new skills, such as healing or crafting. Create Complex Environments : Define dungeons, forests, or towns with unique interactions.","title":"Experimentation Ideas"},{"location":"usage/examples/role_playing.html#next-steps","text":"Once you've explored the RPG simulation, try creating your own custom scenarios or move on to Experimental Scenarios for more advanced setups.","title":"Next Steps"},{"location":"usage/examples/small_town.html","text":"Example: Small Town Simulation \u00b6 This example demonstrates how to set up and run a small-town simulation in Token World. The scenario involves a community of agents interacting with each other and their environment, creating emergent behaviors over time. WARNING: The below steps are for illustrative purposes only and not meant to serve as actual instructions Scenario Overview \u00b6 The small town includes: - Agents : A mix of professions, each with distinct roles and personalities. - Entities : Objects and features in the town, such as food items, tools, and buildings. - Interactions : Agents perform tasks like trading, farming, or exploring, dynamically changing the environment. Configuration \u00b6 Below is the configuration for a small-town simulation: Agents \u00b6 Define the town's residents: \"agents\" : [ { \"name\" : \"Alice\" , \"role\" : \"Farmer\" , \"personality\" : \"Curious and resourceful. Enjoys growing crops and helping others.\" }, { \"name\" : \"Bob\" , \"role\" : \"Merchant\" , \"personality\" : \"Clever and opportunistic. Seeks opportunities for trade and negotiation.\" }, { \"name\" : \"Eve\" , \"role\" : \"Explorer\" , \"personality\" : \"Adventurous and brave. Likes to discover new areas and gather resources.\" } ] Entities \u00b6 Define the resources available in the town: \"entities\" : [ { \"name\" : \"Apple\" , \"properties\" : { \"isEdible\" : true , \"calories\" : 50 } }, { \"name\" : \"Plow\" , \"properties\" : { \"isTool\" : true , \"durability\" : 100 } }, { \"name\" : \"Field\" , \"properties\" : { \"canGrowCrops\" : true , \"size\" : 10 } } ] Running the Simulation \u00b6 Use the provided configuration files ( scenario.json and entities.json ). Start the simulation: bash python run_simulation.py Observe agent actions and state changes in real time. Example Interactions \u00b6 As the simulation progresses, you might see logs like: [Agent: Alice] Action: \"Plant crops in the field.\" [Environment] Preconditions met. Action executed. [Entity: Field] Crops planted. Growth started. [Agent: Bob] Action: \"Trade apples with Alice.\" [Environment] Preconditions met. Trade executed. [Agent: Alice] Received coins. [Agent: Bob] Received apples. [Agent: Eve] Action: \"Explore the forest.\" [Environment] Preconditions met. New area discovered. Resources added: [Wood]. Experimentation Ideas \u00b6 Add More Agents : Introduce new roles like a blacksmith or healer. Modify Entities : Add new tools or resources, such as gold or wheat. Tune Personalities : Change agents\u2019 personalities to see how their behaviors evolve. Next Steps \u00b6 Expand this small-town simulation or try a different scenario, like a Role-Playing Game , to explore Token World's full potential!","title":"Small Town Simulation"},{"location":"usage/examples/small_town.html#example-small-town-simulation","text":"This example demonstrates how to set up and run a small-town simulation in Token World. The scenario involves a community of agents interacting with each other and their environment, creating emergent behaviors over time. WARNING: The below steps are for illustrative purposes only and not meant to serve as actual instructions","title":"Example: Small Town Simulation"},{"location":"usage/examples/small_town.html#scenario-overview","text":"The small town includes: - Agents : A mix of professions, each with distinct roles and personalities. - Entities : Objects and features in the town, such as food items, tools, and buildings. - Interactions : Agents perform tasks like trading, farming, or exploring, dynamically changing the environment.","title":"Scenario Overview"},{"location":"usage/examples/small_town.html#configuration","text":"Below is the configuration for a small-town simulation:","title":"Configuration"},{"location":"usage/examples/small_town.html#agents","text":"Define the town's residents: \"agents\" : [ { \"name\" : \"Alice\" , \"role\" : \"Farmer\" , \"personality\" : \"Curious and resourceful. Enjoys growing crops and helping others.\" }, { \"name\" : \"Bob\" , \"role\" : \"Merchant\" , \"personality\" : \"Clever and opportunistic. Seeks opportunities for trade and negotiation.\" }, { \"name\" : \"Eve\" , \"role\" : \"Explorer\" , \"personality\" : \"Adventurous and brave. Likes to discover new areas and gather resources.\" } ]","title":"Agents"},{"location":"usage/examples/small_town.html#entities","text":"Define the resources available in the town: \"entities\" : [ { \"name\" : \"Apple\" , \"properties\" : { \"isEdible\" : true , \"calories\" : 50 } }, { \"name\" : \"Plow\" , \"properties\" : { \"isTool\" : true , \"durability\" : 100 } }, { \"name\" : \"Field\" , \"properties\" : { \"canGrowCrops\" : true , \"size\" : 10 } } ]","title":"Entities"},{"location":"usage/examples/small_town.html#running-the-simulation","text":"Use the provided configuration files ( scenario.json and entities.json ). Start the simulation: bash python run_simulation.py Observe agent actions and state changes in real time.","title":"Running the Simulation"},{"location":"usage/examples/small_town.html#example-interactions","text":"As the simulation progresses, you might see logs like: [Agent: Alice] Action: \"Plant crops in the field.\" [Environment] Preconditions met. Action executed. [Entity: Field] Crops planted. Growth started. [Agent: Bob] Action: \"Trade apples with Alice.\" [Environment] Preconditions met. Trade executed. [Agent: Alice] Received coins. [Agent: Bob] Received apples. [Agent: Eve] Action: \"Explore the forest.\" [Environment] Preconditions met. New area discovered. Resources added: [Wood].","title":"Example Interactions"},{"location":"usage/examples/small_town.html#experimentation-ideas","text":"Add More Agents : Introduce new roles like a blacksmith or healer. Modify Entities : Add new tools or resources, such as gold or wheat. Tune Personalities : Change agents\u2019 personalities to see how their behaviors evolve.","title":"Experimentation Ideas"},{"location":"usage/examples/small_town.html#next-steps","text":"Expand this small-town simulation or try a different scenario, like a Role-Playing Game , to explore Token World's full potential!","title":"Next Steps"}]}